<?php

/*
 *
题目：
    俩个单链表相交的一系列问题

    在本题中，单链表可能有环，也可能无环，给定俩个单链表的头节点head1和head2，
    这俩个链表可能相交也可能不相交。请实现一个函数，如果俩个链表相交，请返回相交的第一个节点，
    如果不相交，返回null。

    要求：如果链表1的长度为n，链表2的长度为m，时间复杂度要达到O(N+M)，额外空间复杂度为O(1)

 */
class IntersectNode
{

}

$obj = new IntersectNode();
$ref =& $obj;

var_dump($ref);

/*

- 有环链表的检测·
    解1：遍历链表并将节点存储到hashset中，如果所遍历的节点存在于hashset中，代表着有环
    解2：定义指针F、指针S，F指针走2步，S指针走1步，当S、F指针相遇时链表有环，如果要找到入环节点，只需要让F指针回到原点，让F和S指针每次前进一步，当它门再次相遇的节点就是入环节点。


- 俩个无环的链表，如何判断是否相交，如果相交如何返回相交节点
    俩个无环的链表，如果俩个链表的最后一个节点是相同的，则俩个链表相交，这是因为只有最后一个节点相同，才不会破坏链表next指针的结构。
    如果相交，让长度较大的链表减长度较小的链表得到差值，再让长度较大的链表减去该差值，这时俩个链表同时前进，当俩个节点相遇时就能得到相交的节点

- 一个有环的链表和一个无环的链表
    一个有环的链表和一个无环的链表，节点是不可能相交的，如果相交会破坏链表的next指针结构。

- 俩个链表都是有环的
    俩个有环的链表，会有3种可能，
    第一种是俩个有环的链表都是独立的
    第二种是B链表的尾部节点指向A链表的环中某个节点，
    最后是B链表的尾部节点指向A链表非环节点中的某个节点

    如果A链表的入环节点等于B链表的入环节点，属于最后种情况，我们将环屏蔽掉，在求相交节点其实是求无环链表的相交节点。

    如果俩个入环节点都不相等，则属于第一和第二俩种情况，这时候用A链表的入环节点往下一个节点遍历，如果能找到B链表的入环节点则属于第二种情况，
    否则属于第一种情况，针对第二种情况，俩个入环节点都可以算作相交的点，只不过距离不同。
*/