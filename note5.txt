## 递归与动态规划

### 暴力递归
1. 把问题转化为规模小的同类子问题
2. 有明确的不需要继续进行递归的条件
3. 有当得到了子问题的结果之后的决策过程
4. 不记录每一个子问题的解


### 动态规划
1. 从暴力递归中来
2. 将每一个子问题的解记录下来，避免重复计算
3. 把暴力递归的过程，抽象成了状态表达
4. 并且存在化简状态表达，使其更加简洁的可能


### n的阶乘


递归版本改动态规划

### 问题7
给你一个二位数组，二维数组中的每个数都是正数，要求从左上角走到右下角，
每一步只能向右或向下。沿途经过的数字要全部累加起来，返回最小的路径和。

3 7 2
4 6 1
2 9 2

### 问题8
给你一个数组arr和一个整数aim，如果可以任意选择arr中的数字，能不能累加到aim，返回true或false。

### 问题9
给定俩个数组w和v，俩个数组长度相等，w[i]确定第i件商品的重量，v[i]确定第i件商品的价格，
再给定一个整数bag，要求你挑选的商品重量加起来一定不能超过bag，确定在满足这个条件下，你能获得的最大价值。

有后效性问题，父问题的解会影响子问题

无后效性问题具备以下特性：
1. 分析可变参数 => 确定解决空间 => 返回参数的范围就是解范围
2. 确定最终状态：父函数要的解
3. 根据basecase确定初始状态
4. 分析一个普通位置依赖哪些位置
5. 根据依赖顺序逆序算出整张表

到达子状态的路径，不会影响子状态的返回值，这就是无后效性问题。



递归：当我确定计算方式的时候计算机可以帮我计算，当我不确定计算方式的时候计算机可以帮我尝试。
